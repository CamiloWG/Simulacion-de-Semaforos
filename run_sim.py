# run_sim.py - Script principal con todas las mejoras implementadas
from semaforos.lane import Lane
from semaforos.intersection import Intersection
from semaforos.simulation import Simulation
from semaforos.gui import GUI


def main():
    """
    Simulaci√≥n de sem√°foros auto-organizantes - Versi√≥n completamente mejorada

    MEJORAS IMPLEMENTADAS:
    ‚úÖ Sistema de patrones de tr√°fico din√°micos con picos y valles aleatorios
    ‚úÖ Implementaci√≥n correcta de todas las 5 reglas del algoritmo
    ‚úÖ Mejor l√≥gica de movimiento de veh√≠culos sin atascos err√°ticos
    ‚úÖ M√©tricas de rendimiento y eficiencia mejoradas
    ‚úÖ Interfaz gr√°fica m√°s informativa y visualmente atractiva
    ‚úÖ Sistema de debug para verificar funcionamiento de reglas

    REGLAS IMPLEMENTADAS:
    1. ‚úÖ Contador acumulativo por veh√≠culos esperando en sem√°foro rojo
    2. ‚úÖ Tiempo m√≠nimo obligatorio en verde antes de cambiar
    3. ‚úÖ No cambiar si pocos veh√≠culos est√°n cerca de cruzar
    4. ‚úÖ Cambiar si no hay tr√°fico en verde pero s√≠ en rojo
    5. ‚úÖ Cambiar si hay veh√≠culos detenidos despu√©s del cruce
    6. ‚úÖ Emergencia: ambos sem√°foros rojos si hay bloqueo cruzado
    """

    print("=" * 80)
    print("SIMULACI√ìN DE SEM√ÅFOROS AUTO-ORGANIZANTES - VERSI√ìN MEJORADA")
    print("=" * 80)
    print()
    print("üöÄ NUEVAS CARACTER√çSTICAS:")
    print("  ‚Ä¢ Patrones de tr√°fico din√°micos con picos y valles")
    print("  ‚Ä¢ Implementaci√≥n correcta de las 5 reglas del algoritmo")
    print("  ‚Ä¢ Veh√≠culos con comportamiento realista")
    print("  ‚Ä¢ M√©tricas de rendimiento en tiempo real")
    print("  ‚Ä¢ Interfaz visual mejorada con indicadores de tr√°fico")
    print("  ‚Ä¢ Panel de debug para verificar el funcionamiento")
    print()

    # Configuraci√≥n de carriles con patrones de tr√°fico din√°micos
    lane_A = Lane(
        name="A",
        max_speed=1.2,  # Velocidad ligeramente mayor
        lane_length=450.0,  # Carriles m√°s largos
        min_gap_units=6.0,  # Separaci√≥n m√°s realista
        vehicle_length=5.0,  # Longitud expl√≠cita de veh√≠culos
    )
    # El patr√≥n de tr√°fico se configura autom√°ticamente en __post_init__

    lane_B = Lane(
        name="B",
        max_speed=1.1,  # Velocidades ligeramente diferentes
        lane_length=450.0,
        min_gap_units=6.0,
        vehicle_length=5.0,
    )

    # Configuraci√≥n del cruce con par√°metros optimizados
    intersection = Intersection(
        lane_A=lane_A,
        lane_B=lane_B,
        d=150.0,  # Distancia de detecci√≥n - m√°s amplia
        n=12,  # Umbral del contador - m√°s equilibrado
        u=40,  # Tiempo m√≠nimo en verde - suficiente para flujo
        m=3,  # M√°ximo veh√≠culos cerca para no cambiar
        r=45.0,  # Distancia de restricci√≥n - zona cr√≠tica
        e=30.0,  # Distancia de emergencia - detecci√≥n de bloqueos
    )

    # Estado inicial: carril A en verde
    intersection.light_A.set_green()
    intersection.light_B.set_red()

    # Crear simulaci√≥n
    simulation = Simulation(intersection=intersection, max_steps=2000000)

    # Crear interfaz gr√°fica mejorada
    gui = GUI(simulation, width=1400, height=900)

    print("üìã REGLAS DEL ALGORITMO:")
    print("  1. Acumular contador por veh√≠culos esperando en rojo")
    print(f"     ‚Üí Cambiar cuando contador ‚â• {intersection.n}")
    print("  2. Mantener sem√°foro verde m√≠nimo tiempo")
    print(f"     ‚Üí Tiempo m√≠nimo: {intersection.u} unidades")
    print("  3. No cambiar si pocos veh√≠culos van a cruzar")
    print(f"     ‚Üí Si ‚â§ {intersection.m} veh√≠culos en zona r={intersection.r}")
    print("  4. Cambiar si no hay tr√°fico en verde pero s√≠ en rojo")
    print(f"     ‚Üí Detectar en distancia d={intersection.d}")
    print("  5. Cambiar si hay bloqueo despu√©s del cruce")
    print(f"     ‚Üí Detectar en distancia e={intersection.e}")
    print("  6. Emergencia: ambos rojos si bloqueo cruzado")
    print()

    print("üéÆ CONTROLES MEJORADOS:")
    print("  ESPACIO     - Pausar/Reanudar simulaci√≥n")
    print("  ‚Üë/‚Üì         - Velocidad de simulaci√≥n (1x-10x)")
    print("  ‚Üê/‚Üí         - Intensidad de picos de tr√°fico")
    print("  Z           - Mostrar/ocultar zonas D, R, E")
    print("  S           - Panel de estad√≠sticas detalladas")
    print("  D           - Panel de debug (verificaci√≥n de reglas)")
    print("  T           - Indicadores de patrones de tr√°fico")
    print("  R           - Reiniciar simulaci√≥n")
    print("  ESC         - Salir")
    print()

    print("üìä M√âTRICAS DISPONIBLES:")
    print("  ‚Ä¢ Eficiencia del sistema (% veh√≠culos completados)")
    print("  ‚Ä¢ Tiempo promedio de espera")
    print("  ‚Ä¢ Rendimiento por carril")
    print("  ‚Ä¢ Gr√°fico de throughput en tiempo real")
    print("  ‚Ä¢ Contadores de reglas en tiempo real")
    print()

    print("üé® VISUALIZACI√ìN:")
    print("  ‚Ä¢ Veh√≠culos azules: Carril A (horizontal ‚Üí)")
    print("  ‚Ä¢ Veh√≠culos magenta: Carril B (vertical ‚Üì)")
    print("  ‚Ä¢ Veh√≠culos grises: Detenidos")
    print("  ‚Ä¢ Zona D (azul): Detecci√≥n de veh√≠culos")
    print("  ‚Ä¢ Zona R (naranja): Restricci√≥n para cambios")
    print("  ‚Ä¢ Zona E (roja): Detecci√≥n de bloqueos")
    print("  ‚Ä¢ Indicadores de tr√°fico: Verde/Amarillo/Rojo")
    print()

    print("‚ö° PATRONES DE TR√ÅFICO DIN√ÅMICOS:")
    print("  ‚Ä¢ Carril A: Picos cada ~300 unidades, desfase 0")
    print("  ‚Ä¢ Carril B: Picos cada ~300 unidades, desfase 150")
    print("  ‚Ä¢ Variaci√≥n aleatoria en tasas de spawn")
    print("  ‚Ä¢ Per√≠odos de tr√°fico bajo y alto")
    print()

    print("üîß PAR√ÅMETROS ACTUALES:")
    print(f"  d = {intersection.d} (distancia detecci√≥n)")
    print(f"  n = {intersection.n} (umbral contador)")
    print(f"  u = {intersection.u} (tiempo m√≠nimo verde)")
    print(f"  m = {intersection.m} (veh√≠culos cerca m√°x)")
    print(f"  r = {intersection.r} (distancia restricci√≥n)")
    print(f"  e = {intersection.e} (distancia emergencia)")
    print()

    print("Iniciando simulaci√≥n mejorada...")
    print("=" * 80)

    try:
        # Ejecutar interfaz gr√°fica
        gui.run()
    except KeyboardInterrupt:
        print("\nSimulaci√≥n interrumpida por el usuario.")
    except Exception as e:
        print(f"\nError durante la simulaci√≥n: {e}")
        import traceback

        traceback.print_exc()
    finally:
        print("\nSimulaci√≥n finalizada.")


if __name__ == "__main__":
    main()
